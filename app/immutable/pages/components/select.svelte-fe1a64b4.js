import{S as x,i as h,s as v,w as l,x as c,y as $,q as i,o as f,B as m,k as S,m as O,g as p,d as u,t as _,h as g}from"../../chunks/index-9f7629f3.js";import{d as C,S as I,O as b}from"../../chunks/docs-63a5e3db.js";import{C as k}from"../../chunks/component-5b135dda.js";/* empty css                              */import"../../chunks/forward-events-932ef468.js";import"../../chunks/svelte-02f513e0.js";function q(a){let e;return{c(){e=_("Undercover Onion")},l(n){e=g(n,"Undercover Onion")},m(n,t){p(n,e,t)},d(n){n&&u(e)}}}function R(a){let e;return{c(){e=_("Testicle Rainbow")},l(n){e=g(n,"Testicle Rainbow")},m(n,t){p(n,e,t)},d(n){n&&u(e)}}}function T(a){let e,n,t,s;return e=new b({props:{value:"onion",$$slots:{default:[q]},$$scope:{ctx:a}}}),t=new b({props:{value:"testicle",$$slots:{default:[R]},$$scope:{ctx:a}}}),{c(){l(e.$$.fragment),n=S(),l(t.$$.fragment)},l(o){c(e.$$.fragment,o),n=O(o),c(t.$$.fragment,o)},m(o,r){$(e,o,r),p(o,n,r),$(t,o,r),s=!0},p(o,r){const d={};r&1&&(d.$$scope={dirty:r,ctx:o}),e.$set(d);const w={};r&1&&(w.$$scope={dirty:r,ctx:o}),t.$set(w)},i(o){s||(i(e.$$.fragment,o),i(t.$$.fragment,o),s=!0)},o(o){f(e.$$.fragment,o),f(t.$$.fragment,o),s=!1},d(o){m(e,o),o&&u(n),m(t,o)}}}function U(a){let e;return{c(){e=_("I label selects.")},l(n){e=g(n,"I label selects.")},m(n,t){p(n,e,t)},d(n){n&&u(e)}}}function B(a){let e,n;return e=new I({props:{placeholder:"Like I said...",$$slots:{label:[U],default:[T]},$$scope:{ctx:a}}}),{c(){l(e.$$.fragment)},l(t){c(e.$$.fragment,t)},m(t,s){$(e,t,s),n=!0},p(t,s){const o={};s&1&&(o.$$scope={dirty:s,ctx:t}),e.$set(o)},i(t){n||(i(e.$$.fragment,t),n=!0)},o(t){f(e.$$.fragment,t),n=!1},d(t){m(e,t)}}}function L(a){let e,n;return e=new k({props:{docs:C,$$slots:{inline:[B]},$$scope:{ctx:a}}}),{c(){l(e.$$.fragment)},l(t){c(e.$$.fragment,t)},m(t,s){$(e,t,s),n=!0},p(t,[s]){const o={};s&1&&(o.$$scope={dirty:s,ctx:t}),e.$set(o)},i(t){n||(i(e.$$.fragment,t),n=!0)},o(t){f(e.$$.fragment,t),n=!1},d(t){m(e,t)}}}class G extends x{constructor(e){super(),h(this,e,null,L,v,{})}}export{G as default};
